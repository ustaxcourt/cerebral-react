{"version":3,"sources":["../src/Hoc.js"],"names":["HOC","BaseComponent","dependencies","mergeProps","props","controller","name","onUpdate","bind","view","View","displayName","mount","nextProps","onPropsUpdate","dynamicDependencies","length","update","unMount","stateChanges","force","updateFromState","forceUpdate","React","Component","CerebralComponent","context","_displayName","render","createElement","contextType","ControllerContext"],"mappings":";;;;;;;;kBAiEwBA,G;;AAjExB;;;;AACA;;AACA;;;;AACA;;;;;;;;;;IAEMC,a;;;AACJ,yBAAYC,YAAZ,EAA0BC,UAA1B,EAAsCC,KAAtC,EAA6CC,UAA7C,EAAyDC,IAAzD,EAA+D;AAAA;;AAAA,8HACvDF,KADuD;;AAE7D,QAAI,CAACC,UAAL,EAAiB;AACf,gCACE,8IADF;AAGD;;AAED,UAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,UAAKC,IAAL,GAAY,IAAIC,cAAJ,CAAS;AACnBR,gCADmB;AAEnBC,4BAFmB;AAGnBC,kBAHmB;AAInBC,4BAJmB;AAKnBM,mBAAaL,IALM;AAMnBC,gBAAU,MAAKA;AANI,KAAT,CAAZ;AAQA,UAAKE,IAAL,CAAUG,KAAV;AAjB6D;AAkB9D;;AAED;;;;;;;;0CAIsBC,S,EAAW;AAC/B,aAAO,KAAKJ,IAAL,CAAUK,aAAV,CAAwB,KAAKV,KAA7B,EAAoCS,SAApC,CAAP;AACD;;AAED;;;;;;wCAGoB;AAClB,UAAI,KAAKJ,IAAL,CAAUM,mBAAV,CAA8BC,MAAlC,EAA0C;AACxC,aAAKP,IAAL,CAAUQ,MAAV,CAAiB,KAAKb,KAAtB;AACD;AACF;;AAED;;;;;;yCAGqB;AACnB,UAAI,KAAKK,IAAL,CAAUM,mBAAV,CAA8BC,MAAlC,EAA0C;AACxC,aAAKP,IAAL,CAAUQ,MAAV,CAAiB,KAAKb,KAAtB;AACD;AACF;;AAED;;;;;;2CAGuB;AACrB,WAAKK,IAAL,CAAUS,OAAV;AACD;;;6BAEQC,Y,EAAcC,K,EAAO;AAC5B,WAAKX,IAAL,CAAUY,eAAV,CAA0BF,YAA1B,EAAwC,KAAKf,KAA7C,EAAoDgB,KAApD;AACA,WAAKE,WAAL;AACD;;;;EAzDyBC,gBAAMC,S;;AA4DnB,SAASxB,GAAT,CAAaE,YAAb,EAA2BC,UAA3B,EAAuCqB,SAAvC,EAAkD;AAAA,MACzDC,iBADyD;AAAA;;AAE7D,+BAAYrB,KAAZ,EAAmBsB,OAAnB,EAA4B;AAAA;;AAAA,mIAExBxB,YAFwB,EAGxBC,UAHwB,EAIxBC,KAJwB,EAKxBsB,OALwB,EAMxBF,UAAUb,WAAV,IAAyBa,UAAUlB,IANX;AAQ3B;;AAV4D;AAAA;AAAA,+BAYpD;AACP,eAAO,KAAKG,IAAL,CAAUkB,YAAjB;AACD;AAd4D;AAAA;AAAA,+BAgBpD;AACP,eAAO,KAAKlB,IAAL,CAAUmB,MAAV,CAAiB,KAAKxB,KAAtB,EAA6B,UAACA,KAAD;AAAA,iBAClCmB,gBAAMM,aAAN,CAAoBL,SAApB,EAA+BpB,KAA/B,CADkC;AAAA,SAA7B,CAAP;AAGD;AApB4D;;AAAA;AAAA,IAC/BH,aAD+B;;AAsB/DwB,oBAAkBd,WAAlB,0BAAoDa,UAAUb,WAAV,IAClDa,UAAUlB,IADZ;;AAGAmB,oBAAkBK,WAAlB,GAAgCC,0BAAhC;;AAEA,SAAON,iBAAP;AACD","file":"Hoc.js","sourcesContent":["import React from 'react'\nimport { View, throwError } from 'cerebral'\nimport PropTypes from 'prop-types'\nimport { ControllerContext } from './context'\n\nclass BaseComponent extends React.Component {\n  constructor(dependencies, mergeProps, props, controller, name) {\n    super(props)\n    if (!controller) {\n      throwError(\n        'Can not find controller, did you remember to use the Container component? Read more at: http://cerebraljs.com/docs/api/components.html#react'\n      )\n    }\n\n    this.onUpdate = this.onUpdate.bind(this)\n    this.view = new View({\n      dependencies,\n      mergeProps,\n      props,\n      controller,\n      displayName: name,\n      onUpdate: this.onUpdate,\n    })\n    this.view.mount()\n  }\n\n  /*\n    We only allow forced render by change of props passed\n    or Container tells it to render\n  */\n  shouldComponentUpdate(nextProps) {\n    return this.view.onPropsUpdate(this.props, nextProps)\n  }\n\n  /*\n    We have to update any usage of \"get\" when the component mounts\n  */\n  componentDidMount() {\n    if (this.view.dynamicDependencies.length) {\n      this.view.update(this.props)\n    }\n  }\n\n  /*\n    We have to update any usage of \"get\" when the component updates\n  */\n  componentDidUpdate() {\n    if (this.view.dynamicDependencies.length) {\n      this.view.update(this.props)\n    }\n  }\n\n  /*\n    Unregister with existing state dependencies\n  */\n  componentWillUnmount() {\n    this.view.unMount()\n  }\n\n  onUpdate(stateChanges, force) {\n    this.view.updateFromState(stateChanges, this.props, force)\n    this.forceUpdate()\n  }\n}\n\nexport default function HOC(dependencies, mergeProps, Component) {\n  class CerebralComponent extends BaseComponent {\n    constructor(props, context) {\n      super(\n        dependencies,\n        mergeProps,\n        props,\n        context,\n        Component.displayName || Component.name\n      )\n    }\n\n    toJSON() {\n      return this.view._displayName\n    }\n\n    render() {\n      return this.view.render(this.props, (props) =>\n        React.createElement(Component, props)\n      )\n    }\n  }\n  CerebralComponent.displayName = `CerebralWrapping_${Component.displayName ||\n    Component.name}`\n\n  CerebralComponent.contextType = ControllerContext\n\n  return CerebralComponent\n}"]}